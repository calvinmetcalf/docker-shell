{"version":3,"sources":["../lib/index.js"],"names":["DockerShell","constructor","options","process","env","DOCKER_IP","Error","containerImage","run","cmd","slave","container","console","log","docker","image","e","split","command","args","slice","code","spawn","error","kill","bind","on","reason","promise"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEe,MAAMA,WAAN,CAAkB;AAC/BC,cAAYC,UAAU,EAAtB,EAA0B;AACxB,QAAI,CAACC,QAAQC,GAAR,CAAYC,SAAjB,EAA4B;AAC1B,YAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AAED,SAAKC,cAAL,GAAsBL,QAAQK,cAAR,IAA0B,aAAhD;AACD;;AAEKC,KAAN,CAAUC,GAAV,EAAe;AAAA;;AAAA;AACb,UAAIC,KAAJ;;AAEA,UAAI;AACF,YAAI,MAAKC,SAAT,EAAoB;AAClBC,kBAAQC,GAAR,CAAY,eAAZ;AACAH,kBAAQ,MAAM,sBAAO,MAAKC,SAAZ,EAAuB,IAAvB,CAAd;AACD,SAHD,MAGO;AACLC,kBAAQC,GAAR,CAAY,eAAZ;AACA,cAAIC,SAAS,MAAM,oBAAK,EAAL,CAAnB;;AAEAJ,kBAAQ,MAAM,qBAAYI,MAAZ,EAAoB;AAChCC,mBAAO,MAAKR;AADoB,WAApB,CAAd;AAGD;AACDK,gBAAQC,GAAR,CAAY,mBAAZ;AACAD,gBAAQC,GAAR,CAAYH,MAAMC,SAAlB;AACD,OAdD,CAcE,OAAMK,CAAN,EAAS;AACT,cAAMA,CAAN;AACD;;AAED,UAAIC,QAAQR,IAAIQ,KAAJ,CAAU,GAAV,CAAZ;AACA,UAAIC,UAAUD,MAAM,CAAN,CAAd;AACA,UAAIE,OAAQF,MAAMG,KAAN,CAAY,CAAZ,CAAZ;;AAEA,UAAIC,OAAO,MAAM,mBAAIX,MAAMY,KAAV,EAAiBJ,OAAjB,EAA0BC,IAA1B,CAAjB;AACA,UAAII,QAAQF,OAAO,CAAnB;;AAEA,UAAIE,KAAJ,EAAW;AACT,cAAM,IAAIjB,KAAJ,CAAW,oBAAmBe,IAAK,EAAnC,CAAN;AACD;;AAED,aAAO;AACLG,cAAMA,KAAKC,IAAL,CAAU,IAAV,EAAgB,YAAM;AAAEb,kBAAQC,GAAR,CAAY,kBAAZ;AAAiC,SAAzD,EAA2DH,MAAMC,SAAjE;AADD,OAAP;AAhCa;AAmCd;AA5C8B;;kBAAZX,W;AA+CrBG,QAAQuB,EAAR,CAAW,oBAAX,EAAiC,UAASC,MAAT,EAAiBC,OAAjB,EAA0B;AACzDhB,UAAQC,GAAR,CAAYc,MAAZ;AACD,CAFD","file":"index.js","sourcesContent":["import init from './init';\nimport createSlave from './slave';\nimport attach from './attach';\nimport run from './run';\n\nexport default class DockerShell {\n  constructor(options = {}) {\n    if (!process.env.DOCKER_IP) {\n      throw new Error('Need to specify (at least) DOCKER_IP env variable');\n    }\n\n    this.containerImage = options.containerImage || 'node:alpine';\n  }\n\n  async run(cmd) {\n    let slave;\n\n    try {\n      if (this.container) {\n        console.log('has container');\n        slave = await attach(this.container, true);\n      } else {\n        console.log('new container');\n        let docker = await init({});\n\n        slave = await createSlave(docker, {\n          image: this.containerImage\n        });\n      }\n      console.log('created container');\n      console.log(slave.container);\n    } catch(e) {\n      throw e;\n    }\n\n    let split = cmd.split(' ');\n    let command = split[0];\n    let args =  split.slice(1);\n\n    let code = await run(slave.spawn, command, args);\n    let error = code > 0;\n\n    if (error) {\n      throw new Error(`exited with code ${code}`);\n    }\n\n    return {\n      kill: kill.bind(null, () => { console.log('killed container') }, slave.container)\n    };\n  }\n}\n\nprocess.on('unhandledRejection', function(reason, promise) {\n  console.log(reason);\n});\n"]}