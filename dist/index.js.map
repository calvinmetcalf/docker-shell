{"version":3,"sources":["../lib/index.js"],"names":["init","require","createSlave","attach","run","module","exports","DockerShell","constructor","options","process","env","DOCKER_IP","Error","containerImage","cmd","container","slave","console","log","docker","image","e","split","command","args","slice","code","spawn","error","kill","bind"],"mappings":"AAAA;;;;AAEA,MAAMA,OAAOC,QAAQ,QAAR,CAAb;AACA,MAAMC,cAAcD,QAAQ,SAAR,CAApB;AACA,MAAME,SAASF,QAAQ,UAAR,CAAf;AACA,MAAMG,MAAMH,QAAQ,OAAR,CAAZ;;AAEAI,OAAOC,OAAP,GAAiB,MAAMC,WAAN,CAAkB;AACjCC,cAAYC,UAAU,EAAtB,EAA0B;AACxB,QAAI,CAACC,QAAQC,GAAR,CAAYC,SAAjB,EAA4B;AAC1B,YAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AAED,SAAKC,cAAL,GAAsBL,QAAQK,cAAR,IAA0B,8BAAhD;AACD;;AAEKV,KAAN,CAAUW,GAAV,EAAeC,SAAf,EAA0B;AAAA;;AAAA;AACxB,UAAIC,KAAJ;AACA,UAAI;AACF,YAAID,SAAJ,EAAe;AACbE,kBAAQC,GAAR,CAAY,eAAZ;AACAF,kBAAQ,MAAMd,OAAOa,SAAP,EAAkB,IAAlB,CAAd;AACD,SAHD,MAGO;AACLE,kBAAQC,GAAR,CAAY,eAAZ;AACA,cAAIC,SAAS,MAAMpB,KAAK,EAAL,CAAnB;;AAEAiB,kBAAQ,MAAMf,YAAYkB,MAAZ,EAAoB;AAChCC,mBAAO,MAAKP;AADoB,WAApB,CAAd;AAGD;AACDI,gBAAQC,GAAR,CAAY,mBAAZ;AACAD,gBAAQC,GAAR,CAAYF,MAAMD,SAAlB;AACD,OAdD,CAcE,OAAMM,CAAN,EAAS;AACT,cAAMA,CAAN;AACD;;AAED,UAAIC,QAAQR,IAAIQ,KAAJ,CAAU,GAAV,CAAZ;AACA,UAAIC,UAAUD,MAAM,CAAN,CAAd;AACA,UAAIE,OAAQF,MAAMG,KAAN,CAAY,CAAZ,CAAZ;;AAEA,UAAIC,OAAO,MAAMvB,IAAIa,MAAMW,KAAV,EAAiBJ,OAAjB,EAA0BC,IAA1B,CAAjB;AACA,UAAII,QAAQF,OAAO,CAAnB;;AAEA,UAAIE,KAAJ,EAAW;AACT,cAAM,IAAIhB,KAAJ,CAAW,oBAAmBc,IAAK,EAAnC,CAAN;AACD;;AAED,aAAO;AACLG,cAAMA,KAAKC,IAAL,CAAU,IAAV,EAAgB,YAAM;AAAEb,kBAAQC,GAAR,CAAY,kBAAZ;AAAiC,SAAzD,EAA2DF,MAAMD,SAAjE;AADD,OAAP;AA/BwB;AAkCzB;AA3CgC,CAAnC","file":"index.js","sourcesContent":["'use strict';\n\nconst init = require('./init');\nconst createSlave = require('./slave');\nconst attach = require('./attach');\nconst run = require('./run');\n\nmodule.exports = class DockerShell {\n  constructor(options = {}) {\n    if (!process.env.DOCKER_IP) {\n      throw new Error('Need to specify (at least) DOCKER_IP env variable');\n    }\n\n    this.containerImage = options.containerImage || 'strider/strider-docker-slave';\n  }\n\n  async run(cmd, container) {\n    let slave;\n    try {\n      if (container) {\n        console.log('has container');\n        slave = await attach(container, true);\n      } else {\n        console.log('new container');\n        let docker = await init({});\n\n        slave = await createSlave(docker, {\n          image: this.containerImage\n        });\n      }\n      console.log('created container');\n      console.log(slave.container);\n    } catch(e) {\n      throw e;\n    }\n\n    let split = cmd.split(' ');\n    let command = split[0];\n    let args =  split.slice(1);\n\n    let code = await run(slave.spawn, command, args);\n    let error = code > 0;\n\n    if (error) {\n      throw new Error(`exited with code ${code}`);\n    }\n\n    return {\n      kill: kill.bind(null, () => { console.log('killed container') }, slave.container)\n    };\n  }\n}\n"]}