{"version":3,"sources":["../lib/create-container.js"],"names":["Bluebird","require","async","debug","es","inspect","isImageLocally","docker","image","withoutTag","split","fullname","listImages","filter","then","images","found","some","img","RepoTags","indexOf","pull","streamc","resolve","reject","pipe","map","data","cb","jsonData","JSON","parse","toString","error","type","on","event","create","createOptions","createContainer","container","id","module","exports","config","Image","isLocally"],"mappings":"AAAA;;AAOA;;;;;;AALA,MAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,QAAQF,QAAQ,OAAR,EAAiB,+BAAjB,CAAd;AACA,MAAMG,KAAKH,QAAQ,cAAR,CAAX;AACA,MAAMI,UAAUJ,QAAQ,MAAR,EAAgBI,OAAhC;;;AAGA,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,KAAhC,EAAuC;AACrC,QAAMC,aAAaD,MAAME,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAnB;AACA,QAAMC,WAAWH,UAAUC,UAAV,GAAwB,GAAED,KAAM,SAAhC,GAA2CA,KAA5D;;AAEA,SAAOD,OAAOK,UAAP,CAAkB,EAACC,QAAQJ,UAAT,EAAlB,EAAwCK,IAAxC,CAA8CC,MAAD,IAAY;AAC9D,UAAMC,QAAQD,OAAOE,IAAP,CAAY,UAAUC,GAAV,EAAe;AACvC,aAAOA,IAAIC,QAAJ,IAAgBD,IAAIC,QAAJ,CAAaC,OAAb,CAAqBT,QAArB,KAAkC,CAAzD;AACD,KAFa,CAAd;AAGA,WAAOK,KAAP;AACD,GALM,CAAP;AAMD;;AAED,SAASK,IAAT,CAAcd,MAAd,EAAsBC,KAAtB,EAA6B;AAC3B,SAAOD,OAAOc,IAAP,CAAYb,KAAZ,EAAmBM,IAAnB,CAAyBQ,OAAD,IAAa;AAC1C,WAAO,IAAItB,QAAJ,CAAa,CAACuB,OAAD,EAAUC,MAAV,KAAqB;AACvCF,cACGG,IADH,CACQrB,GAAGsB,GAAH,CAAO,CAACC,IAAD,EAAOC,EAAP,KAAc;AACzB,YAAIC,WAAW,IAAf;;AAEA,YAAI;AACFA,qBAAWC,KAAKC,KAAL,CAAWJ,KAAKK,QAAL,EAAX,CAAX;AACD,SAFD,CAEE,OAAOC,KAAP,EAAc;AACdJ,qBAAW;AACTK,kBAAM,QADG;AAETP,kBAAMA,KAAKK,QAAL;AAFG,WAAX;AAID;;AAEDJ,WAAG,IAAH,EAASC,QAAT;AACD,OAbK,CADR,EAeGM,EAfH,CAeM,MAfN,EAecC,SAAS;AACnBjC,cAAO,eAAcE,QAAQ+B,KAAR,CAAe,EAApC;AACD,OAjBH,EAkBGD,EAlBH,CAkBM,KAlBN,EAkBa,MAAM;AACfZ;AACD,OApBH;AAqBD,KAtBM,CAAP;AAuBD,GAxBM,CAAP;AAyBD;;AAED,SAASc,MAAT,CAAgBC,aAAhB,EAA+B/B,MAA/B,EAAuC;AACrC,SAAOA,OAAOgC,eAAP,CAAuBD,aAAvB,EAAsCxB,IAAtC,CAA4C0B,SAAD,IAAe;AAC/DrC,UAAM,8BAAN,EAAsCqC,UAAUC,EAAhD;AACA,WAAO,sBAAOD,SAAP,EAAkB,KAAlB,CAAP;AACD,GAHM,CAAP;AAID;;AAEDE,OAAOC,OAAP,GAAiB,UAAUL,aAAV,EAAyB/B,MAAzB,EAAiCqC,MAAjC,EAAyC;AACxD;AACAzC,QAAM,qCAAN;AACA,SAAOG,eAAeC,MAAf,EAAuB+B,cAAcO,KAArC,EAA4C/B,IAA5C,CAAkDgC,SAAD,IAAe;AACrE;AACA,QAAIA,SAAJ,EAAe;AACb3C,YAAM,0BAAN;AACA;AACD,KAHD,MAGO;AACLA,YAAO,yBAAwBmC,cAAcO,KAAM,WAAnD;AACA,aAAOxB,KAAKd,MAAL,EAAa+B,cAAcO,KAA3B,CAAP;AACD;AACF,GATM,EASJ/B,IATI,CASC,MAAM;AACZ;AACAX,UAAM,uBAAN;AACA,WAAOkC,OAAOC,aAAP,EAAsB/B,MAAtB,CAAP;AACD,GAbM,CAAP;AAcD,CAjBD","file":"create-container.js","sourcesContent":["'use strict';\n\nconst Bluebird = require('bluebird');\nconst async = require('async');\nconst debug = require('debug')('docker-shell:create-container');\nconst es = require('event-stream');\nconst inspect = require('util').inspect;\nimport attach from './attach';\n\nfunction isImageLocally(docker, image) {\n  const withoutTag = image.split(':')[0];\n  const fullname = image === withoutTag ? `${image}:latest` : image;\n\n  return docker.listImages({filter: withoutTag}).then((images) => {\n    const found = images.some(function (img) {\n      return img.RepoTags && img.RepoTags.indexOf(fullname) >= 0;\n    });\n    return found;\n  });\n}\n\nfunction pull(docker, image) {\n  return docker.pull(image).then((streamc) => {\n    return new Bluebird((resolve, reject) => {\n      streamc\n        .pipe(es.map((data, cb) => {\n          let jsonData = null;\n\n          try {\n            jsonData = JSON.parse(data.toString());\n          } catch (error) {\n            jsonData = {\n              type: 'stdout',\n              data: data.toString()\n            };\n          }\n\n          cb(null, jsonData);\n        }))\n        .on('data', event => {\n          debug(`pull event: ${inspect(event)}`);\n        })\n        .on('end', () => {\n          resolve();\n        });\n    });\n  });\n}\n\nfunction create(createOptions, docker) {\n  return docker.createContainer(createOptions).then((container) => {\n    debug('[runner:docker] container id', container.id);\n    return attach(container, false);\n  });\n}\n\nmodule.exports = function (createOptions, docker, config) {\n  // First check if we already have the image stored locally.\n  debug('Checking if image exists locally...');\n  return isImageLocally(docker, createOptions.Image).then((isLocally) => {\n    // If the image isn't stored locally, pull it.\n    if (isLocally) {\n      debug('Image is already locally');\n      return;\n    } else {\n      debug(`Unable to find image \"${createOptions.Image}\" locally`);\n      return pull(docker, createOptions.Image);\n    }\n  }).then(() => {\n    // Create the container.\n    debug('Creating container...');\n    return create(createOptions, docker);\n  });\n};\n"]}