{"version":3,"sources":["../lib/create-container.js"],"names":["async","require","debug","es","inspect","attach","isImageLocally","docker","image","done","withoutTag","split","fullname","listImages","filter","err","images","found","some","img","RepoTags","indexOf","pull","streamc","pipe","map","data","cb","json_data","JSON","parse","toString","error","type","on","event","create","createOptions","createContainer","container","Error","id","module","exports","config","waterfall","callback","Image","isLocally"],"mappings":"AAAA;;AAEA,MAAMA,QAAQC,QAAQ,OAAR,CAAd;AACA,MAAMC,QAAQD,QAAQ,OAAR,EAAiB,+BAAjB,CAAd;AACA,MAAME,KAAKF,QAAQ,cAAR,CAAX;AACA,MAAMG,UAAUH,QAAQ,MAAR,EAAgBG,OAAhC;AACA,MAAMC,SAASJ,QAAQ,UAAR,CAAf;;AAEA,SAASK,cAAT,CAAwBC,MAAxB,EAAgCC,KAAhC,EAAuCC,IAAvC,EAA6C;AAC3C,QAAMC,aAAaF,MAAMG,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAnB;AACA,QAAMC,WAAWJ,UAAUE,UAAV,GAAwB,GAAEF,KAAM,SAAhC,GAA2CA,KAA5D;;AAEAD,SAAOM,UAAP,CAAkB,EAACC,QAAQJ,UAAT,EAAlB,EAAwC,UAAUK,GAAV,EAAeC,MAAf,EAAuB;AAC7D,QAAID,GAAJ,EAAS,OAAON,KAAKM,GAAL,CAAP;;AAET,UAAME,QAAQD,OAAOE,IAAP,CAAY,UAAUC,GAAV,EAAe;AACvC,aAAOA,IAAIC,QAAJ,IAAgBD,IAAIC,QAAJ,CAAaC,OAAb,CAAqBT,QAArB,KAAkC,CAAzD;AACD,KAFa,CAAd;;AAIAH,SAAK,IAAL,EAAWQ,KAAX;AACD,GARD;AASD;;AAED,SAASK,IAAT,CAAcf,MAAd,EAAsBC,KAAtB,EAA6BC,IAA7B,EAAmC;AACjCF,SAAOe,IAAP,CAAYd,KAAZ,EAAmB,CAACO,GAAD,EAAMQ,OAAN,KAAkB;AACnC,QAAIR,GAAJ,EAAS,OAAON,KAAKM,GAAL,CAAP;;AAETQ,YACGC,IADH,CACQrB,GAAGsB,GAAH,CAAO,CAACC,IAAD,EAAOC,EAAP,KAAc;AACzB,UAAIC,YAAY,IAAhB;;AAEA,UAAI;AACFA,oBAAYC,KAAKC,KAAL,CAAWJ,KAAKK,QAAL,EAAX,CAAZ;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACdJ,oBAAY;AACVK,gBAAM,QADI;AAEVP,gBAAMA,KAAKK,QAAL;AAFI,SAAZ;AAID;;AAEDJ,SAAG,IAAH,EAASC,SAAT;AACD,KAbK,CADR,EAeGM,EAfH,CAeM,MAfN,EAecC,SAAS;AACnBjC,YAAO,eAAcE,QAAQ+B,KAAR,CAAe,EAApC;AACD,KAjBH,EAkBGD,EAlBH,CAkBM,KAlBN,EAkBa,MAAM;AACfzB;AACD,KApBH;AAqBD,GAxBD;AAyBD;;AAED,SAAS2B,MAAT,CAAgBC,aAAhB,EAA+B9B,MAA/B,EAAuCE,IAAvC,EAA6C;AAC3CF,SAAO+B,eAAP,CAAuBD,aAAvB,EAAsC,CAACtB,GAAD,EAAMwB,SAAN,KAAoB;AACxD,QAAIxB,GAAJ,EAAS,OAAON,KAAK,IAAI+B,KAAJ,CAAUzB,GAAV,CAAL,CAAP;;AAETb,UAAM,8BAAN,EAAsCqC,UAAUE,EAAhD;AACApC,WAAOkC,SAAP,EAAkB,KAAlB,EAAyB9B,IAAzB;AACD,GALD;AAMD;;AAEDiC,OAAOC,OAAP,GAAiB,UAAUN,aAAV,EAAyB9B,MAAzB,EAAiCqC,MAAjC,EAAyCnC,IAAzC,EAA+C;AAC9DT,QAAM6C,SAAN,CAAgB;AACd;AACAC,cAAY;AACV5C,UAAM,qCAAN;AACAI,mBAAeC,MAAf,EAAuB8B,cAAcU,KAArC,EAA4CD,QAA5C;AACD,GALa;;AAOd;AACA,GAACE,SAAD,EAAYF,QAAZ,KAAyB;AACvB,QAAIE,SAAJ,EAAe;AACb9C,YAAM,0BAAN;AACA,aAAO4C,UAAP;AACD;AACD5C,UAAO,yBAAwBmC,cAAcU,KAAM,WAAnD;AACAzB,SAAKf,MAAL,EAAa8B,cAAcU,KAA3B,EAAkCD,QAAlC;AACD,GAfa;;AAiBd;AACA,QAAM;AACJ5C,UAAM,uBAAN;AACAkC,WAAOC,aAAP,EAAsB9B,MAAtB,EAA8BE,IAA9B;AACD,GArBa,CAAhB;AAuBD,CAxBD","file":"create-container.js","sourcesContent":["'use strict';\n\nconst async = require('async');\nconst debug = require('debug')('docker-shell:create-container');\nconst es = require('event-stream');\nconst inspect = require('util').inspect;\nconst attach = require('./attach');\n\nfunction isImageLocally(docker, image, done) {\n  const withoutTag = image.split(':')[0];\n  const fullname = image === withoutTag ? `${image}:latest` : image;\n\n  docker.listImages({filter: withoutTag}, function (err, images) {\n    if (err) return done(err);\n\n    const found = images.some(function (img) {\n      return img.RepoTags && img.RepoTags.indexOf(fullname) >= 0;\n    });\n\n    done(null, found);\n  });\n}\n\nfunction pull(docker, image, done) {\n  docker.pull(image, (err, streamc) => {\n    if (err) return done(err);\n\n    streamc\n      .pipe(es.map((data, cb) => {\n        let json_data = null;\n\n        try {\n          json_data = JSON.parse(data.toString());\n        } catch (error) {\n          json_data = {\n            type: 'stdout',\n            data: data.toString()\n          };\n        }\n\n        cb(null, json_data);\n      }))\n      .on('data', event => {\n        debug(`pull event: ${inspect(event)}`);\n      })\n      .on('end', () => {\n        done();\n      });\n  });\n}\n\nfunction create(createOptions, docker, done) {\n  docker.createContainer(createOptions, (err, container) => {\n    if (err) return done(new Error(err));\n\n    debug('[runner:docker] container id', container.id);\n    attach(container, false, done);\n  });\n}\n\nmodule.exports = function (createOptions, docker, config, done) {\n  async.waterfall([\n    // First check if we already have the image stored locally.\n    callback => {\n      debug('Checking if image exists locally...');\n      isImageLocally(docker, createOptions.Image, callback);\n    },\n\n    // If the image isn't stored locally, pull it.\n    (isLocally, callback) => {\n      if (isLocally) {\n        debug('Image is already locally');\n        return callback();\n      }\n      debug(`Unable to find image \"${createOptions.Image}\" locally`);\n      pull(docker, createOptions.Image, callback);\n    },\n\n    // Create the container.\n    () => {\n      debug('Creating container...');\n      create(createOptions, docker, done);\n    }\n  ]);\n};\n"]}