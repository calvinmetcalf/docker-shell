{"version":3,"sources":["../lib/attach.js"],"names":["attach","debug","container","started","stream","stdin","stdout","stderr","then","streamc","reject","Error","start","wait","res","stop","catch","err","spawn","bind","kill","remove","force","v","command","args","options","proc","write","JSON","stringify","type","PassThrough","demux","pipe","split","parse","mapSync","data","event","emit","code","removeListener","unpipe"],"mappings":"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","file":"attach.js","sourcesContent":["import Bluebird from 'bluebird';\nimport { EventEmitter } from 'events';\nimport setupDebug from 'debug';\nimport es from 'event-stream';\nimport stream from 'stream';\nimport demuxer from './demuxer';\n\nconst debug = setupDebug('docker-shell:attach');\n\nexport default function attach(container, started) {\n  return container.attach({\n    stream: true, stdin: true,\n    stdout: true, stderr: true\n  }).then((streamc) => {\n    if (!streamc) return Bluebird.reject(new Error('Failed to attach container stream'));\n\n    if (!started) {\n      debug('starting container');\n      // start, and wait for it to be done\n      return container.start().then(() => {\n        debug('started container');\n        container.wait()\n          .then((res) => {\n            debug('done with container, success', res);\n            container.stop();\n          })\n          .catch((err) => {\n            debug('done with container, erred', err);\n            container.stop();\n          });\n      }).then(() => {\n        return {\n          spawn: spawn.bind(null, streamc),\n          kill,\n          container\n        };\n      });\n    }\n\n    return {\n      spawn: spawn.bind(null, streamc),\n      kill,\n      container\n    };\n  })\n\n  function kill() {\n    return container.remove({\n      force: true, // Stop container and remove\n      v: true // Remove any attached volumes\n    });\n  }\n\n  function spawn(streamc, command, args, options) {\n    const proc = new EventEmitter();\n\n    proc.kill = function () {\n      streamc.write(`${JSON.stringify({type: 'kill'})}\\n`);\n    };\n    proc.stdout = new stream.PassThrough();\n    proc.stderr = new stream.PassThrough();\n    proc.stdin = streamc;\n\n    var stdout = new stream.PassThrough();\n    var stderr = new stream.PassThrough();\n    const demux = demuxer(streamc, stdout, stderr);\n\n    stdout\n      .pipe(es.split())\n      .pipe(es.parse())\n      .pipe(es.mapSync(function (data) {\n        debug('got an event', data);\n        if (data.event === 'stdout') {\n          proc.stdout.write(data.data);\n        }\n        if (data.event === 'stderr') {\n          proc.stderr.write(data.data);\n        }\n        if (data.event === 'exit') {\n          proc.emit('exit', data.code);\n          streamc.removeListener('readable', demux);\n          stdout.unpipe();\n        }\n      }));\n\n    debug('running command', command);\n    debug('with args', args);\n\n    streamc.write(`${JSON.stringify({command: command, args: args, type: 'start'})}\\n`);\n\n    return proc;\n  }\n}\n"]}