{"version":3,"sources":["../lib/attach.js"],"names":["Bluebird","require","EventEmitter","debug","es","stream","demuxer","module","exports","attach","container","started","resolve","reject","stdin","stdout","stderr","attached","err","streamc","Error","start","wait","data","stop","console","log","spawn","bind","kill","resolveKill","rejectKill","remove","force","v","res","command","args","options","proc","write","JSON","stringify","type","PassThrough","demux","pipe","split","parse","mapSync","event","emit","code","removeListener","unpipe"],"mappings":"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","file":"attach.js","sourcesContent":["'use strict';\n\nconst Bluebird = require('bluebird');\nconst EventEmitter = require('events').EventEmitter;\nconst debug = require('debug')('docker-shell:attach');\nconst es = require('event-stream');\nconst stream = require('stream');\nconst demuxer = require('./demuxer');\n\nmodule.exports = function attach(container, started) {\n  return new Bluebird((resolve, reject) => {\n    container.attach({\n      stream: true, stdin: true,\n      stdout: true, stderr: true\n    }, attached);\n\n    function attached(err, streamc) {\n      if (err) return reject(err);\n      if (!streamc) return reject(new Error('Failed to attach container stream'));\n\n      if (!started) {\n        // start, and wait for it to be done\n        container.start(err => {\n          if (err) return reject(new Error(err));\n\n          container.wait((err, data) => {\n            debug('done with the container', err, data);\n            container.stop(() => {\n              debug('Stopped the container!');\n            });\n          });\n          console.log('attach container')\n          console.log(container)\n          resolve({\n            spawn: spawn.bind(null, streamc),\n            kill,\n            container\n          });\n        });\n      } else {\n        resolve({\n          spawn: spawn.bind(null, streamc),\n          kill,\n          container\n        });\n      }\n    }\n\n    function kill() {\n      return new Bluebird((resolveKill, rejectKill) => {\n        container.remove({\n          force: true, // Stop container and remove\n          v: true // Remove any attached volumes\n        }, function (err, res) {\n          if (err) return rejectKill(err);\n          resolveKill(res);\n        });\n      });\n    }\n\n    function spawn(streamc, command, args, options) {\n      const proc = new EventEmitter();\n\n      proc.kill = function () {\n        streamc.write(`${JSON.stringify({type: 'kill'})}\\n`);\n      };\n      proc.stdout = new stream.PassThrough();\n      proc.stderr = new stream.PassThrough();\n      proc.stdin = streamc;\n\n      var stdout = new stream.PassThrough();\n      var stderr = new stream.PassThrough();\n      const demux = demuxer(streamc, stdout, stderr);\n\n      stdout\n        .pipe(es.split())\n        .pipe(es.parse())\n        .pipe(es.mapSync(function (data) {\n          debug('got an event', data);\n          if (data.event === 'stdout') {\n            proc.stdout.write(data.data);\n          }\n          if (data.event === 'stderr') {\n            proc.stderr.write(data.data);\n          }\n          if (data.event === 'exit') {\n            proc.emit('exit', data.code);\n            streamc.removeListener('readable', demux);\n            stdout.unpipe();\n          }\n        }));\n\n      debug('running command', command);\n      debug('with args', args);\n\n      streamc.write(`${JSON.stringify({command: command, args: args, type: 'start'})}\\n`);\n\n      return proc;\n    }\n  });\n}\n"]}